use crate::calc::lexer::Token;
use crate::calc::ast::{Expr,  BinOp, binop, neg};

grammar;

pub Expr: Expr = {
    Term,
    <l:Expr> "+" <r:Term> => binop(l, BinOp::Add, r),
    <l:Expr> "-" <r:Term> => binop(l, BinOp::Sub, r),
}

pub Term: Expr = {
    Factor,
    <l:Term> "*" <r:Factor> => binop(l, BinOp::Mul, r),
    <l:Term> "/" <r:Factor> => binop(l, BinOp::Div, r),
}

pub Factor: Expr = {
    <n:Int> => Expr::Num(n),
    "(" <e:Expr> ")" => e,
    "-" <e:Factor> => neg(e),
}

extern {
    type Location = usize;
    type Error = String;

    enum Token {
        Int => Token::Int(<i32>),
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Times,
        "/" => Token::Div,
        "(" => Token::LParen,
        ")" => Token::RParen,
    }
} 
